================================================================================
Statements
================================================================================

Type0 := Base {
    empty: { ; }

    expr: {
        foo.bar();
        baz = 123;
        baz *= 45.6;
    }

    just_return: {
        return;
    }

    return_value: {
        return 123;
    }

    omit_trailing_semicolon_after_expression: { foo; bar }
    omit_trailing_semicolon_after_assignment: { foo; bar = baz }
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (code_block
              (empty_statement))))
        (binding
          (identifier)
          (binding_expression
            (code_block
              (function_call_expression
                (member_access
                  (identifier)
                  (identifier))
                (arguments))
              (self_assignment
                (identifier)
                (number_literal))
              (self_assignment
                (identifier)
                (number_literal)))))
        (binding
          (identifier)
          (binding_expression
            (code_block
              (return_statement))))
        (binding
          (identifier)
          (binding_expression
            (code_block
              (return_statement
                (number_literal)))))
        (binding
          (identifier)
          (binding_expression
            (code_block
              (identifier)
              (identifier))))
        (binding
          (identifier)
          (binding_expression
            (code_block
              (identifier)
              (self_assignment
                (identifier)
                (identifier)))))))))

================================================================================
If statements
================================================================================

Type0 := Base {
    just_if: {
        if (1) { 2; }
    }

    else_block: {
        if (1) { 2; } else { 3; }
    }

    else_if: {
        if (1) { 2; } else if (3) { 4; } else if (5) { 6; }
    }
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (binding
          name: (identifier)
          expr: (binding_expression
            (code_block
              (if_statement
                condition: (parenthesized_expression
                  (number_literal))
                true_expr: (code_block
                  (number_literal))))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (code_block
              (if_statement
                condition: (parenthesized_expression
                  (number_literal))
                true_expr: (code_block
                  (number_literal))
                false_expr: (code_block
                  (number_literal))))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (code_block
              (if_statement
                condition: (parenthesized_expression
                  (number_literal))
                true_expr: (code_block
                  (number_literal))
                false_expr: (if_statement
                  condition: (parenthesized_expression
                    (number_literal))
                  true_expr: (code_block
                    (number_literal))
                  false_expr: (if_statement
                    condition: (parenthesized_expression
                      (number_literal))
                    true_expr: (code_block
                      (number_literal))))))))))))
