================================================================================
Sub elements
================================================================================

Type0 := Base {
    Bar {}
    foo := Bar {}
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (sub_element
          (element
            base_type: (qualified_type_name
              (identifier))
            (element_content)))
        (sub_element
          id: (identifier)
          (element
            base_type: (qualified_type_name
              (identifier))
            (element_content)))))))

================================================================================
Repeated elements
================================================================================

Type0 := Base {
    for b in bars: Bar {}
    for [i] in bars: Bar {}
    for b[i] in bars: Bar {}
    for _ in get_foos(): foo := Foo {}
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (repeated_element
          model_data: (identifier)
          model: (qualified_name
            (identifier))
          (sub_element
            (element
              base_type: (qualified_type_name
                (identifier))
              (element_content))))
        (repeated_element
          index: (identifier)
          model: (qualified_name
            (identifier))
          (sub_element
            (element
              base_type: (qualified_type_name
                (identifier))
              (element_content))))
        (repeated_element
          model_data: (identifier)
          index: (identifier)
          model: (qualified_name
            (identifier))
          (sub_element
            (element
              base_type: (qualified_type_name
                (identifier))
              (element_content))))
        (repeated_element
          model_data: (identifier)
          model: (function_call_expression
            function: (qualified_name
              (identifier))
            arguments: (arguments))
          (sub_element
            id: (identifier)
            (element
              base_type: (qualified_type_name
                (identifier))
              (element_content))))))))

================================================================================
Conditional elements
================================================================================

Type0 := Base {
    if bar : Bar {}
    if (foo ? bar : baz) : Bar {}
    if true : foo := Foo {}
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (conditional_element
          (qualified_name
            (identifier))
          (sub_element
            (element
              (qualified_type_name
                (identifier))
              (element_content))))
        (conditional_element
          (parenthesized_expression
            (conditional_expression
              (qualified_name
                (identifier))
              (qualified_name
                (identifier))
              (qualified_name
                (identifier))))
          (sub_element
            (element
              (qualified_type_name
                (identifier))
              (element_content))))
        (conditional_element
          (bool_literal)
          (sub_element
            (identifier)
            (element
              (qualified_type_name
                (identifier))
              (element_content))))))))

================================================================================
Property declarations
================================================================================

Type0 := Base {
    property<int> no_value;
    property<string> with_value: "hello";
    property<int> two_way_value <=> bar;
    property two_way_alias <=> baz;

    property<[{foo: int, bar: string}]> compound_type;
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (property_declaration
          type: (qualified_type_name
            (identifier))
          name: (identifier))
        (property_declaration
          type: (qualified_type_name
            (identifier))
          binding: (binding
            name: (identifier)
            expr: (binding_expression
              (string_literal
                (string_fragment)))))
        (property_declaration
          type: (qualified_type_name
            (identifier))
          binding: (two_way_binding
            name: (identifier)
            expr: (qualified_name
              (identifier))))
        (property_declaration
          binding: (two_way_binding
            name: (identifier)
            expr: (qualified_name
              (identifier))))
        (property_declaration
          type: (array_type
            (object_type
              (object_type_member
                name: (identifier)
                type: (qualified_type_name
                  (identifier)))
              (object_type_member
                name: (identifier)
                type: (qualified_type_name
                  (identifier)))))
          name: (identifier))))))

================================================================================
Property bindings
================================================================================

Type0 := Base {
    foo: {}
    bar: baz;
    two_way <=> bar.baz;
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (binding
          name: (identifier)
          expr: (binding_expression
            (code_block)))
        (binding
          name: (identifier)
          expr: (binding_expression
            (qualified_name
              (identifier))))
        (two_way_binding
          name: (identifier)
          expr: (qualified_name
            (identifier)
            (identifier)))))))

================================================================================
Property animations
================================================================================

Type0 := Base {
    animate x { duration: 1000; }
    animate foo.x, y {}
    animate * { duration: 100; }
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (property_animation
          property_names: (qualified_property_names
            (qualified_name
              (identifier)))
          bindings: (property_bindings
            (binding
              name: (identifier)
              expr: (binding_expression
                (number_literal)))))
        (property_animation
          property_names: (qualified_property_names
            (qualified_name
              (identifier)
              (identifier))
            (qualified_name
              (identifier)))
          bindings: (property_bindings))
        (property_animation
          property_names: (property_wildcard)
          bindings: (property_bindings
            (binding
              name: (identifier)
              expr: (binding_expression
                (number_literal)))))))))

================================================================================
States
================================================================================

Type0 := Base {
    states []
    states [
        foo when bar : {
            baz.x: y;
        }
        qux : {
            x: y;
        }
    ]
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (states)
        (states
          (state
            id: (identifier)
            condition: (qualified_name
              (identifier))
            property_changes: (property_changes
              (qualified_binding
                name: (qualified_name
                  (identifier)
                  (identifier))
                expr: (binding_expression
                  (qualified_name
                    (identifier))))))
          (state
            id: (identifier)
            property_changes: (property_changes
              (qualified_binding
                name: (qualified_name
                  (identifier))
                expr: (binding_expression
                  (qualified_name
                    (identifier)))))))))))

================================================================================
Transitions
================================================================================

Type0 := Base {
    transitions []
    transitions [
        in pressed : {
            animate x { duration: 1000; }
        }
        out pressed : {
            animate x { duration: 100; }
        }
    ]
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (transitions)
        (transitions
          (transition
            id: (identifier)
            animations: (property_animations
              (property_animation
                property_names: (qualified_property_names
                  (qualified_name
                    (identifier)))
                bindings: (property_bindings
                  (binding
                    name: (identifier)
                    expr: (binding_expression
                      (number_literal)))))))
          (transition
            id: (identifier)
            animations: (property_animations
              (property_animation
                property_names: (qualified_property_names
                  (qualified_name
                    (identifier)))
                bindings: (property_bindings
                  (binding
                    name: (identifier)
                    expr: (binding_expression
                      (number_literal))))))))))))

================================================================================
Callback declarations
================================================================================

Type0 := Base {
    callback no_arg;
    callback no_arg_paren();
    callback args(int, string);
    callback trailing_comma(int,);
    callback return_type() -> int;
    callback two_way_alias <=> foo.bar;
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (callback_declaration
          name: (identifier))
        (callback_declaration
          name: (identifier)
          parameters: (callback_declaration_parameters))
        (callback_declaration
          name: (identifier)
          parameters: (callback_declaration_parameters
            (qualified_type_name
              (identifier))
            (qualified_type_name
              (identifier))))
        (callback_declaration
          name: (identifier)
          parameters: (callback_declaration_parameters
            (qualified_type_name
              (identifier))))
        (callback_declaration
          name: (identifier)
          parameters: (callback_declaration_parameters)
          return_type: (qualified_type_name
            (identifier)))
        (callback_declaration
          binding: (two_way_binding
            name: (identifier)
            expr: (qualified_name
              (identifier)
              (identifier))))))))

================================================================================
Callback connections
================================================================================

Type0 := Base {
    no_arg => {}
    no_arg_paren() => {}
    args(x, y) => {}
    args(x,) => {}
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (callback_connection
          name: (identifier)
          expr: (code_block))
        (callback_connection
          name: (identifier)
          parameters: (callback_connection_parameters)
          expr: (code_block))
        (callback_connection
          name: (identifier)
          parameters: (callback_connection_parameters
            (identifier)
            (identifier))
          expr: (code_block))
        (callback_connection
          name: (identifier)
          parameters: (callback_connection_parameters
            (identifier))
          expr: (code_block))))))

================================================================================
Children placeholder
================================================================================

Type0 := Base {
    @children
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (children_placeholder)))))
