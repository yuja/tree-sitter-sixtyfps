================================================================================
String literals
================================================================================

Type0 := Base {
    string: "foo";
    empty_string: "";
    escaped_string: "foo\"bar";
    template_string: "foo\{1 + 2}bar\{"\{nested}"}";
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (string_literal
              (string_fragment))))
        (binding
          (identifier)
          (binding_expression
            (string_literal)))
        (binding
          (identifier)
          (binding_expression
            (string_literal
              (string_fragment)
              (escape_sequence)
              (string_fragment))))
        (binding
          (identifier)
          (binding_expression
            (string_literal
              (string_fragment)
              (template_substitution
                (binary_expression
                  (number_literal)
                  (number_literal)))
              (string_fragment)
              (template_substitution
                (string_literal
                  (template_substitution
                    (qualified_name
                      (identifier))))))))))))

================================================================================
Number literals
================================================================================

Type0 := Base {
    zero: 0;
    decimal: 1.2;
    decimal: 12.345;
    percent: 10%;
    unit: 9px;
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (number_literal)))
        (binding
          (identifier)
          (binding_expression
            (number_literal)))
        (binding
          (identifier)
          (binding_expression
            (number_literal)))
        (binding
          (identifier)
          (binding_expression
            (number_literal
              (unit))))
        (binding
          (identifier)
          (binding_expression
            (number_literal
              (unit))))))))

================================================================================
Invalid number literals
================================================================================

Type0 := Base {
    separated_unit: 9 px;
    mixed_unit: 9px%;
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (ERROR)
          (binding_expression
            (qualified_name
              (identifier))))
        (binding
          (identifier)
          (binding_expression
            (number_literal
              (unit))
            (ERROR)))))))

================================================================================
Color literals
================================================================================

Type0 := Base {
    short_hex: #01a;
    full_hex: #DeadBeef;
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (color_literal)))
        (binding
          (identifier)
          (binding_expression
            (color_literal)))))))

================================================================================
SpecialIdLookup literals
================================================================================

Type0 := Base {
    bool_literals: true || false;
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (binary_expression
              (bool_literal)
              (bool_literal))))))))

================================================================================
Arrays
================================================================================

Type0 := Base {
    array: [1, 2, foo,];
    empty: [];
    nested: [[1, 2], []];
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (array
              (number_literal)
              (number_literal)
              (qualified_name
                (identifier)))))
        (binding
          (identifier)
          (binding_expression
            (array)))
        (binding
          (identifier)
          (binding_expression
            (array
              (array
                (number_literal)
                (number_literal))
              (array))))))))

================================================================================
Objects
================================================================================

Type0 := Base {
    object: {foo: bar, baz: 2};
    empty: ({});
    nested: {array: [1, 2], number: 3,};
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (object_literal
              (object_member
                (identifier)
                (qualified_name
                  (identifier)))
              (object_member
                (identifier)
                (number_literal)))))
        (binding
          (identifier)
          (binding_expression
            (parenthesized_expression
              (object_literal))))
        (binding
          (identifier)
          (binding_expression
            (object_literal
              (object_member
                (identifier)
                (array
                  (number_literal)
                  (number_literal)))
              (object_member
                (identifier)
                (number_literal)))))))))

================================================================================
@keywords
================================================================================

Type0 := Base {
    image_url: @image-url("foo/bar.png");

    linear_gradient: @linear-gradient(123deg, #000 0%, #fff 100%);
    linear_gradient2: @linear-gradient(123deg, foo.bar, transparent 100%);
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (binding
          name: (identifier)
          expr: (binding_expression
            (at_image_url
              source: (string_literal
                (string_fragment)))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (at_linear_gradient
              arguments: (at_linear_gradient_arguments
                (number_literal
                  (unit))
                (gradient_stop
                  color: (color_literal)
                  position: (number_literal
                    (unit)))
                (gradient_stop
                  color: (color_literal)
                  position: (number_literal
                    (unit)))))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (at_linear_gradient
              arguments: (at_linear_gradient_arguments
                (number_literal
                  (unit))
                (qualified_name
                  (identifier)
                  (identifier))
                (gradient_stop
                  color: (qualified_name
                    (identifier))
                  position: (number_literal
                    (unit)))))))))))

================================================================================
Unary operations
================================================================================

Type0 := Base {
    unary_pos: +12;
    unary_neg: -34;
    unary_bang: !foo;
    unary_bang_bang: !!foo;
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (unary_op_expression
              (number_literal))))
        (binding
          (identifier)
          (binding_expression
            (unary_op_expression
              (number_literal))))
        (binding
          (identifier)
          (binding_expression
            (unary_op_expression
              (qualified_name
                (identifier)))))
        (binding
          (identifier)
          (binding_expression
            (unary_op_expression
              (unary_op_expression
                (qualified_name
                  (identifier))))))))))

================================================================================
Binary operations
================================================================================

Type0 := Base {
    arithmetic: 1 + 2 * 3 - 4 / 5;

    logical: (1 > 2) == (3 > 4) || 5 != 6;
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (binary_expression
              (binary_expression
                (number_literal)
                (binary_expression
                  (number_literal)
                  (number_literal)))
              (binary_expression
                (number_literal)
                (number_literal)))))
        (binding
          (identifier)
          (binding_expression
            (binary_expression
              (binary_expression
                (parenthesized_expression
                  (binary_expression
                    (number_literal)
                    (number_literal)))
                (parenthesized_expression
                  (binary_expression
                    (number_literal)
                    (number_literal))))
              (binary_expression
                (number_literal)
                (number_literal)))))))))

================================================================================
Ternary operations
================================================================================

Type0 := Base {
    ternary: 1 > 2 ? 3 + 4 : 5 * 6;
    ternary_assoc: 1 ? 2 : 3 ? 4 : 5;
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (binding
          name: (identifier)
          expr: (binding_expression
            (conditional_expression
              condition: (binary_expression
                lhs: (number_literal)
                rhs: (number_literal))
              true_expr: (binary_expression
                lhs: (number_literal)
                rhs: (number_literal))
              false_expr: (binary_expression
                lhs: (number_literal)
                rhs: (number_literal)))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (conditional_expression
              condition: (number_literal)
              true_expr: (number_literal)
              false_expr: (conditional_expression
                condition: (number_literal)
                true_expr: (number_literal)
                false_expr: (number_literal)))))))))

================================================================================
Function calls
================================================================================

Type0 := Base {
    call0: fun();
    call2: fun(g(0, 1), 2);

    qualified_call: foo.bar(baz);

    trailing_comma: fun(0,);

    bang_call: !foo();
}

--------------------------------------------------------------------------------

(document
  (component
    id: (identifier)
    root_element: (element
      base_type: (qualified_type_name
        (identifier))
      (element_content
        (binding
          name: (identifier)
          expr: (binding_expression
            (function_call_expression
              function: (qualified_name
                (identifier))
              arguments: (arguments))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (function_call_expression
              function: (qualified_name
                (identifier))
              arguments: (arguments
                (function_call_expression
                  function: (qualified_name
                    (identifier))
                  arguments: (arguments
                    (number_literal)
                    (number_literal)))
                (number_literal)))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (function_call_expression
              function: (qualified_name
                (identifier)
                (identifier))
              arguments: (arguments
                (qualified_name
                  (identifier))))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (function_call_expression
              function: (qualified_name
                (identifier))
              arguments: (arguments
                (number_literal)))))
        (binding
          name: (identifier)
          expr: (binding_expression
            (unary_op_expression
              sub: (function_call_expression
                function: (qualified_name
                  (identifier))
                arguments: (arguments)))))))))

================================================================================
Compound expressions
================================================================================

Type0 := Base {
    paren: (foo);
    paren2: ((0));
}

--------------------------------------------------------------------------------

(document
  (component
    (identifier)
    (element
      (qualified_type_name
        (identifier))
      (element_content
        (binding
          (identifier)
          (binding_expression
            (parenthesized_expression
              (qualified_name
                (identifier)))))
        (binding
          (identifier)
          (binding_expression
            (parenthesized_expression
              (parenthesized_expression
                (number_literal)))))))))
